import json
# Temp ={"智能合板":{"无任务":{"刷新按钮":"步骤描述"},"H22":22,"H23":{"H31":1}}}
# Temp2 ={"智能合板":{"无任务":{"刷新按钮":"步骤描述"},"H221":22,"H23":{"H311":1}}}
# Temp3 = {"fei":23}
#
# list = [
#     {"智能合板":{"无任务":{"刷新按钮":["步骤描述"]},"H22":[22],"H23":{"H31":[1]}}},
#     {"智能合板":{"无任务":{"刷新按钮":["步骤描述"]},"H221":[22],"H23":{"H311":[1]}}},
#     {"fei":[23]}
# ]

l = [
     {'cases': {'/*4*/添加已锁定用户，新增失败': {'Null': 'Null'}}}
]

l1 = [
    {'我的（模块）': {'券包（子模块1）': {'优惠券中心（子模块2）': {'领取优惠券（功能点）': {
        'cases': {'/*1*/测试2，是否能领取未开始的优惠券/*（前置条件）进入我的>领取优惠券*/': {'1. 选择还未开始的优惠券': '1. 提示：未到领取时间'}}}}}}},
    {'我的（模块）': {'券包（子模块1）': {'优惠券中心（子模块2）': {'领取优惠券（功能点）': {
        'cases': {'/*1*/测试2，是否能领取未开始的优惠券/*（前置条件）进入我的>领取优惠券*/': '2. 点击领取'}}}}}},
    {'我的（模块）': {'券包（子模块1）': {'优惠券中心（子模块2）': {'领取优惠券（功能点）': {'cases': {'/*6*/tc：测试1，是否能领取未开始的优惠券/*（前置条件）进入我的>领取优惠券*/': {'1. 选择还未开始的优惠券': '1. 提示：未到领取时间'}}}}}}},
    {'我的（模块）': {'券包（子模块1）': {'优惠券中心（子模块2）': {'领取优惠券（功能点）': {'cases': {'/*6*/tc：测试1，是否能领取未开始的优惠券/*（前置条件）进入我的>领取优惠券*/': '2. 点击领取'}}}}}},
    {'X产品1（#105）': {'订单管理（子模块）': {'订单列表（子模块）': {'新增订单（功能点）': {'cases': {'/*1*/添加上架商品，选择有效用户，新增成功/*笔记：前置条件*/': {'1. 选择商品 c001': '1. 加载商品信息'}}}}}}},
    {'X产品1（#105）': {'订单管理（子模块）': {'订单列表（子模块）': {'新增订单（功能点）': {'cases': {'/*1*/添加上架商品，选择有效用户，新增成功/*笔记：前置条件*/': {'2. 选择用户 nemo': '2. 加载用户信息'}}}}}}},
    {'X产品1（#105）': {'订单管理（子模块）': {'订单列表（子模块）': {'新增订单（功能点）': {'cases': {'/*1*/添加上架商品，选择有效用户，新增成功/*笔记：前置条件*/': {'3. 选择收货地址': '3. 加载收货地址信息'}}}}}}},
    {'X产品1（#105）': {'订单管理（子模块）': {'订单列表（子模块）': {'新增订单（功能点）': {'cases': {'/*1*/添加上架商品，选择有效用户，新增成功/*笔记：前置条件*/': {'4. 点击保存按钮': '4. 提示保存成功'}}}}}}},
    {'X产品1（#105）': {'订单管理（子模块）': {'订单列表（子模块）': {'新增订单（功能点）': {'cases': {'/*2*/添加未上架商品，新增失败': {'1。': '1。'}}}}}}},
    {'X产品1（#105）': {'订单管理（子模块）': {'订单列表（子模块）': {'新增订单（功能点）': {'cases': {'/*4*/添加已锁定用户，新增失败': {'1。': '1。'}}}}}}}
]

def combine_dict(l1):
    o = {}
    for d in l1:
        n = o
        m = d
        p = None
        while isinstance(m, dict):
            if p is not None:
                if k not in p:
                    p[k] = {}
                n = p[k]
            (k, m), = m.items()
            p = n
        while isinstance(m,str):
            p.setdefault(k,m)
            break
        #p.setdefault(k, []).extend(m)
    print(o)

combine_dict(l)